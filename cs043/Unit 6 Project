# Tic Tac Toe

# Importing the libraries we need
import random
import time

# Create a class with all the functions and variables we need
class TicTacToe:

    # Create a function that draws the Tic Tac Toe board
    def drawBoard(self, board):
        # This function prints out the board that it was passed.

        # "board" is a list of 10 strings representing the board (ignore index 0)
        print('   |   |')
        print(' ' + board[1] + ' | ' + board[2] + ' | ' + board[3])
        print('   |   |')
        print('-----------')
        print('   |   |')
        print(' ' + board[4] + ' | ' + board[5] + ' | ' + board[6])
        print('   |   |')
        print('-----------')
        print('   |   |')
        print(' ' + board[7] + ' | ' + board[8] + ' | ' + board[9])
        print('   |   |')

    # Define a function that gets the player's letter based on if the user
    # wants to play PvP or PvC
    def inputPlayerLetter(self, pref):
        # Lets the player type which letter they want to be.
        # Returns a list with the player's letter as the first item, and the computer's letter as the second.
        letter = ''
        if self.pref == 'c':
            while not (letter == 'X' or letter == 'O'):
                print('Do you want to be X or O?')
                letter = input().upper()

            # the first element in the tuple is the player's letter, the second is the computer's letter.
            if letter == 'X':
                return ['X', 'O']
            else:
                return ['O', 'X']

        # This checks if the users wanted to play PvP
        elif self.pref == 'p':
            while not (letter == 'X' or letter == 'O'):
                print('Does Player 1 want to be X or O?')
                letter = input().upper()

            # the first element in the tuple is the player 1's letter, the second is player 2's letter.
            if letter == 'X':
                return ['X', 'O']
            else:
                return ['O', 'X']

    # Randomly chooses who goes first based on preference.
    def whoGoesFirst(self, pref):
        if pref == 'c':
            if random.randint(0, 1) == 0:
                return 'Computer'
            else:
                return 'Player'
        else:
            if random.randint(0, 1) == 0:
                return 'Player 2'
            else:
                return 'Player 1'

    # Asks the player if they want to play again
    def playAgain(self):
        # This function returns True if the player wants to play again, otherwise it returns False.
        print('Do you want to play again? (yes or no)')
        return input().lower().startswith('y')

    # Change the board so that it reflects player's move
    def makeMove(self, board, letter, move):
        board[move] = letter

    # Checks if someone has 3 in a row
    def isWinner(self, bo, le):
        # Given a board and a player's letter, this function returns True if that player has won.
        # We use bo instead of board and le instead of letter, so we don't have to type as much.
        return ((bo[7] == le and bo[8] == le and bo[9] == le) or  # across the top
                (bo[4] == le and bo[5] == le and bo[6] == le) or  # across the middle
                (bo[1] == le and bo[2] == le and bo[3] == le) or  # across the bottom
                (bo[7] == le and bo[4] == le and bo[1] == le) or  # down the left side
                (bo[8] == le and bo[5] == le and bo[2] == le) or  # down the middle
                (bo[9] == le and bo[6] == le and bo[3] == le) or  # down the right side
                (bo[7] == le and bo[5] == le and bo[3] == le) or  # diagonal
                (bo[9] == le and bo[5] == le and bo[1] == le))  # diagonal

    # Make a duplicate of the board list and return it the duplicate.
    def getBoardCopy(self, board):
        dupeBoard = []
        for i in board:
            dupeBoard.append(i)
        return dupeBoard

    # Return true if the passed move is valid (the board index is empty)
    def isSpaceFree(self, board, move):
        return board[move] == ' '

    # The next 2 functions get player 1's move and player 2's move
    def getPlayerMove(self, board, pref):
        # Let the player type in his move.
        self.move = ' '
        while self.move not in '1 2 3 4 5 6 7 8 9'.split() or not self.isSpaceFree(board, int(self.move)):
            if self.pref == 'p':
                print('What is Player 1\'s move? (1-9)')
            else:
                print('What is your move? (1-9)')
            self.move = input()
        return int(self.move)

    def getPlayer2Move(self, board):
        # Let the player type in his move.
        self.move = ' '
        while self.move not in '1 2 3 4 5 6 7 8 9'.split() or not self.isSpaceFree(board, int(self.move)):
            print('What is Player 2\'s move? (1-9)')
            self.move = input()
        return int(self.move)

    # Returns a valid move from the passed list on the passed board.
    # Returns None if there is no valid move.
    def chooseRandomMoveFromList(self, board, movesList):
        possibleMoves = []
        for i in movesList:
            if self.isSpaceFree(board, i):
                possibleMoves.append(i)
        if len(possibleMoves) != 0:
            return random.choice(possibleMoves)
        else:
            return None

    def getComputerMove(self, board, computerLetter):
        # Given a board and the computer's letter, determine where to move and return that move.
        if computerLetter == 'X':
            playerLetter = 'O'
        else:
            playerLetter = 'X'

        # Here is our algorithm for our Tic Tac Toe AI:
        # First, check if we can win in the next move
        for i in range(1, 10):
            copy = self.getBoardCopy(board)
            if self.isSpaceFree(copy, i):
                self.makeMove(copy, computerLetter, i)
                if self.isWinner(copy, computerLetter):
                    return i

        # Check if the player could win on his next move, and block them.
        for i in range(1, 10):
            copy = self.getBoardCopy(board)
            if self.isSpaceFree(copy, i):
                self.makeMove(copy, playerLetter, i)
                if self.isWinner(copy, playerLetter):
                    return i

        # Try to take one of the corners, if they are free.
        self.move = self.chooseRandomMoveFromList(board, [1, 3, 7, 9])
        if self.move != None:
            return self.move

        # Try to take the center, if it is free.
        if self.isSpaceFree(board, 5):
            return 5

        # Move on one of the sides.
        return self.chooseRandomMoveFromList(board, [2, 4, 6, 8])

    def isBoardFull(self, board):
        # Return True if every space on the board has been taken. Otherwise, return False.
        for i in range(1, 10):
            if self.isSpaceFree(board, i):
                return False
        return True

    # Gets user's preference if they want to play PvP or PvC
    def askForPreference(self):
        print('Do you want to do Player VS Player (input \'p\') or Computer VS Player (input \'c\'): ')
        pref = input().lower()
        return pref

    # Assigns empty values to pref, turn, and move to change in the while loop
    pref = ''
    turn = ''
    move = 0
    theBoard = [' '] * 10


# Define the object used in the while loop
play = TicTacToe()

print('Welcome to Tic Tac Toe!')
print()

while True:
    # Reassign the 'pref' variable to the return value of the askForPreference function
    play.pref = play.askForPreference()
    if play.pref == 'p':
        playerLetter, player2Letter = play.inputPlayerLetter(play.pref)
        # Reassign the 'turn' variable to the return value of the whoGoesFirst function
        play.turn = play.whoGoesFirst(play.pref)
        # Pause time for half a second so the user can see what is being printed more easily
        time.sleep(0.5)
        print('The ' + play.turn + ' will go first.')
        gameIsPlaying = True

        while gameIsPlaying:
            if play.turn == 'Player 1':
                # Player 1's turn.
                time.sleep(0.5)
                play.drawBoard(play.theBoard)
                time.sleep(0.5)
                # Reassign the 'move' variable to the return value of the getPlayerMove function
                play.move = play.getPlayerMove(play.theBoard, play.pref)
                play.makeMove(play.theBoard, playerLetter, play.move)

                if play.isWinner(play.theBoard, playerLetter):
                    play.drawBoard(play.theBoard)
                    print('Hooray! Player 1 has won the game!')
                    gameIsPlaying = False
                else:
                    if play.isBoardFull(play.theBoard):
                        play.drawBoard(play.theBoard)
                        print('The game is a tie!')
                        break
                    else:
                        play.turn = 'Player 2'

            else:
                # Player 2's turn.
                # We do everything from the if statement above, but now, we change it to accommodate player 2
                time.sleep(0.5)
                play.drawBoard(play.theBoard)
                time.sleep(0.5)
                play.move = play.getPlayer2Move(play.theBoard)
                play.makeMove(play.theBoard, player2Letter, play.move)

                if play.isWinner(play.theBoard, player2Letter):
                    play.drawBoard(play.theBoard)
                    print('Hooray! Player 2 has won the game!')
                    gameIsPlaying = False
                else:
                    if play.isBoardFull(play.theBoard):
                        play.drawBoard(play.theBoard)
                        print('The game is a tie!')
                        break
                    else:
                        play.turn = 'Player 1'
                        
        # Check if the user wants to play again
        if not play.playAgain():
            print("Thanks for playing!")
            break
    
    # Now, we check if the user's preference is PvC and execute the functions needed for it
    elif play.pref == 'c':
        playerLetter, computerLetter = play.inputPlayerLetter(play.pref)
        play.turn = play.whoGoesFirst(play.pref)
        time.sleep(0.5)
        print('The ' + play.turn + ' will go first.')
        gameIsPlaying = True

        while gameIsPlaying:
            if play.turn == 'Player':
                # Player's play.turn.
                time.sleep(0.5)
                play.drawBoard(play.theBoard)
                time.sleep(0.5)
                play.move = play.getPlayerMove(play.theBoard, play.pref)
                play.makeMove(play.theBoard, playerLetter, play.move)

                if play.isWinner(play.theBoard, playerLetter):
                    play.drawBoard(play.theBoard)
                    print('Hooray! You have won the game!')
                    gameIsPlaying = False
                else:
                    if play.isBoardFull(play.theBoard):
                        play.drawBoard(play.theBoard)
                        print('The game is a tie!')
                        break
                    else:
                        play.turn = 'Computer'

            else:
                # Computer's turn.
                play.move = play.getComputerMove(play.theBoard, computerLetter)
                play.makeMove(play.theBoard, computerLetter, play.move)

                if play.isWinner(play.theBoard, computerLetter):
                    play.drawBoard(play.theBoard)
                    print('The computer has beaten you! You lost.')
                    gameIsPlaying = False
                else:
                    if play.isBoardFull(play.theBoard):
                        play.drawBoard(play.theBoard)
                        print('The game is a tie!')
                        break
                    else:
                        play.turn = 'Player'

        # Check if the user wants to play again
        if not play.playAgain():
            print("Thanks for playing!")
            break
